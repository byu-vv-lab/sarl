                    SARL Installation Instructions

======================= Installation from source =======================

1. Install a Java 7 SDK if you have not already.  Go to
http://www.oracle.com/technetwork/java/javase/downloads/ for the
latest from Oracle.  On linux, you can optionally sudo apt-get install
openjdk-7-jdk.

2. Install Apache ant, if you don't already have it
(http://ant.apache.org).

3. Point your web browser to http://vsl.cis.udel.edu/tools and download
the following:
  clj-ds.jar
  hamcrest-core-1.3.jar
  jacoco.tgz
  jsr166y.jar
  junit-4.11.jar
  pcollections-2.1.2.jar
Put these files somewhere on your system and untar the Jacoco archive.

3. Download dependent packages.
	a. If you are using 64-bit mac os, 64-bit linux or 32-bit linux, 
	   download the tgz archives of VSL_dependent 
	   from http://vsl.cis.udel.edu/tools/vsl_depend 
	   and unzip it some where on your system. 

	b. Otherwise, point your web browser to http://vsl.cis.udel.edu/tools and download
	   the following:
  			clj-ds.jar
  			hamcrest-core-1.3.jar
  			jacoco.tgz
  			jsr166y.jar
  			junit-4.11.jar
  			pcollections-2.1.2.jar
	    Put these files somewhere on your system and untar the Jacoco archive

4. (If you have taken step 3.a, skip this step and go to step 5 immediately.)
   Download and build CVC3:
   4a. Start by downloading
       http://www.cs.nyu.edu/acsys/cvc3/releases/2.4.1/cvc3-2.4.1.tar.gz,
       unzip and untar.  
   4b. On linux, make sure you have flex, bison, libgmp10, and openjdk-7-jdk.
       You can get these as follows:
         sudo apt-get install flex bison libgmp10 libgmp-dev openjdk-7-jdk
       On OS X, use the App Store to install XCode, and use XCode to
       install the Developer Tools.
   4c. Change into the CVC3 directory and run the configure script as follows:
       for 32-bit linux:
./configure CXXFLAGS=-m32 --enable-dynamic --enable-java --with-java-home=/usr/lib/jvm/java-7-openjdk-i386
       for 64-bit linux:
./configure CXXFLAGS=-m64 --enable-dynamic --enable-java --with-java-home=/usr/lib/jvm/java-7-openjdk-amd64
       for 64-bit OS X:
./configure CXXFLAGS=-m64 --enable-dynamic --enable-java --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/Current --with-java-includes=/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers
   4d. make

5. svn checkout svn://vsl.cis.udel.edu/sarl/trunk sarl

6. cd sarl

7. Create a file named build.properties in the same directory as the one containing build.xml.
	a. If you are using 64-bit mac os, 64-bit linux or 32-bit linux,  
	   copy and paste the content from properties/build.properties.osx.
	   Edit the entry "root" to point to the corresponding directory that you download at step 3.a.
	
	b. Otherwise, copy and edit one of the examples in the properties directory. 
	   Edit each entry to point to the corresponding items you downloaded in steps 3.b and 4.

8. Type "ant" and everything should build without warnings or errors
and produce sarl.jar.  Type "ant test" to run a JUnit test suite.  All
tests should pass.

If there are any problems, email siegel at udel dot edu.

============== Installation from source using Eclipse ==================

1. Start with Eclipse IDE for Java/EE developers, available at
http://www.eclipse.org/downloads/
You need at least version Kepler (which comes with JUnit 4.11)

2. Do steps 1-4 from above if you have not already.

3. Install an SVN plugin in Eclipse (such as Subversive) if you have
not already.

4. From within Eclipse, select New Project...from SVN.  The archive is
svn://vsl.cis.udel.edu/sarl.  After entering that, open it up and
select the "trunk". (It is simplest to just check out the trunk for
the Eclipse project.)

5. Check out the trunk, and create the project using the New Java
Project Wizard as usual, naming it "SARL".  The .project, .classpath,
and other Eclipse meta-data are already in the SVN archive, saving you
a bunch of work.

6. Create a build.properties file as in the directions above.
This is not used by Eclipse, but you will want to use Ant to
build the jar file.

7. The platform-specific information are handled in Eclipse by
defining Classpath variables.  

	a. (Recommended) If you have put all dependent packages as Step 3.a above,
	   you only need to modify one classpath variables. Go to 
	   Preferences -> Java -> Build Path -> Classpath Variables, 
	   and edit the entry “VSL_DEPEND” to point to the directory 
	   where you put the dependent packages.

	b. Otherwise, navigate to Preferences->Java->Build Path
	   ->Classpath Variables->New and define a new variable called
	   "CVC3". To define it, navigate to and select the file libcvc3.jar
	   you created by building CVC3.  Create a new variable
	   "CLJ-DS" to point to the clj-ds.jar file.  Create a new variable
	   "PCOLLECTIONS" to point to the PCollections jar file.  You may
	   optionally define variable for the source directories of all the above.
	   This can help with debugging.

8. Do a clean build.  Everything should compile.  Generate the sarl.jar
by right-clicking (or ctrl-click on OS X) the build.xml file and
Run As->Ant Build.  

9. Go to Run->Run Configurations....  Create a new JUnit configuration.
Name it SARL Tests.  Select "Run all tests in the selected project..."
and navigate to the folder "test" in the SARL project.
The Test runner should be JUnit 4.  Under the Arguments tab, type
"-ea" (without the quotes) in the VM arguments area (to enable assertion
checking).     Under the Environment tab, add an entry
for DYLD_LIBRARY_PATH (OS X) or LD_LIBRARY_PATH (linux).  The value
for this variable should be a colon-separated list of directories
containing the CVC3 and libgmp shared libraries.  You might want to put
those shared libraries in one directory in a permanent place
to simplify things.   You can also define another Eclipse variable
containing this colon-separated list and use the variable name
for the value.  You should now be able to run the tests by clicking
"Run".